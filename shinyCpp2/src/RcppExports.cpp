// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rnf
double rnf(int a, int b);
RcppExport SEXP shinyCpp2_rnf(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(rnf(a, b));
    return __result;
END_RCPP
}
// sq
std::vector<int> sq(int len, int start);
RcppExport SEXP shinyCpp2_sq(SEXP lenSEXP, SEXP startSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    __result = Rcpp::wrap(sq(len, start));
    return __result;
END_RCPP
}
// nrnf
std::vector<double> nrnf(int n, int a, int b, bool norm);
RcppExport SEXP shinyCpp2_nrnf(SEXP nSEXP, SEXP aSEXP, SEXP bSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type norm(normSEXP);
    __result = Rcpp::wrap(nrnf(n, a, b, norm));
    return __result;
END_RCPP
}
// problemGenerator
NumericMatrix problemGenerator(int nproblem, int noutcomeA, int noutcomeB);
RcppExport SEXP shinyCpp2_problemGenerator(SEXP nproblemSEXP, SEXP noutcomeASEXP, SEXP noutcomeBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nproblem(nproblemSEXP);
    Rcpp::traits::input_parameter< int >::type noutcomeA(noutcomeASEXP);
    Rcpp::traits::input_parameter< int >::type noutcomeB(noutcomeBSEXP);
    __result = Rcpp::wrap(problemGenerator(nproblem, noutcomeA, noutcomeB));
    return __result;
END_RCPP
}
// arrange
std::vector<double> arrange(std::vector<double> opt);
RcppExport SEXP shinyCpp2_arrange(SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<double> >::type opt(optSEXP);
    __result = Rcpp::wrap(arrange(opt));
    return __result;
END_RCPP
}
// transformProblems
GenericVector transformProblems(NumericMatrix problems, int nA);
RcppExport SEXP shinyCpp2_transformProblems(SEXP problemsSEXP, SEXP nASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type problems(problemsSEXP);
    Rcpp::traits::input_parameter< int >::type nA(nASEXP);
    __result = Rcpp::wrap(transformProblems(problems, nA));
    return __result;
END_RCPP
}
// cump
std::vector<double> cump(std::vector<double> ps);
RcppExport SEXP shinyCpp2_cump(SEXP psSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<double> >::type ps(psSEXP);
    __result = Rcpp::wrap(cump(ps));
    return __result;
END_RCPP
}
// v_f
double v_f(double v, double fct, double xp);
RcppExport SEXP shinyCpp2_v_f(SEXP vSEXP, SEXP fctSEXP, SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type fct(fctSEXP);
    Rcpp::traits::input_parameter< double >::type xp(xpSEXP);
    __result = Rcpp::wrap(v_f(v, fct, xp));
    return __result;
END_RCPP
}
// w_ge
double w_ge(double p, double fct, double xp);
RcppExport SEXP shinyCpp2_w_ge(SEXP pSEXP, SEXP fctSEXP, SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type fct(fctSEXP);
    Rcpp::traits::input_parameter< double >::type xp(xpSEXP);
    __result = Rcpp::wrap(w_ge(p, fct, xp));
    return __result;
END_RCPP
}
// w_tk
double w_tk(double p, double xp);
RcppExport SEXP shinyCpp2_w_tk(SEXP pSEXP, SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type xp(xpSEXP);
    __result = Rcpp::wrap(w_tk(p, xp));
    return __result;
END_RCPP
}
// w_p
double w_p(double p, double fct, double xp);
RcppExport SEXP shinyCpp2_w_p(SEXP pSEXP, SEXP fctSEXP, SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type fct(fctSEXP);
    Rcpp::traits::input_parameter< double >::type xp(xpSEXP);
    __result = Rcpp::wrap(w_p(p, fct, xp));
    return __result;
END_RCPP
}
// utility_tk
double utility_tk(std::vector<double> par, NumericVector opt);
RcppExport SEXP shinyCpp2_utility_tk(SEXP parSEXP, SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type opt(optSEXP);
    __result = Rcpp::wrap(utility_tk(par, opt));
    return __result;
END_RCPP
}
// utility_ge
double utility_ge(std::vector<double> par, NumericVector opt);
RcppExport SEXP shinyCpp2_utility_ge(SEXP parSEXP, SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type opt(optSEXP);
    __result = Rcpp::wrap(utility_ge(par, opt));
    return __result;
END_RCPP
}
// utility_p
double utility_p(std::vector<double> par, NumericVector opt);
RcppExport SEXP shinyCpp2_utility_p(SEXP parSEXP, SEXP optSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type opt(optSEXP);
    __result = Rcpp::wrap(utility_p(par, opt));
    return __result;
END_RCPP
}
// choiceRule
double choiceRule(double phi, double utA, double utB);
RcppExport SEXP shinyCpp2_choiceRule(SEXP phiSEXP, SEXP utASEXP, SEXP utBSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type utA(utASEXP);
    Rcpp::traits::input_parameter< double >::type utB(utBSEXP);
    __result = Rcpp::wrap(choiceRule(phi, utA, utB));
    return __result;
END_RCPP
}
// cpt_lik_tk
double cpt_lik_tk(std::vector<double> par, GenericVector problems, std::vector<int> choices, double limit);
RcppExport SEXP shinyCpp2_cpt_lik_tk(SEXP parSEXP, SEXP problemsSEXP, SEXP choicesSEXP, SEXP limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type problems(problemsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type choices(choicesSEXP);
    Rcpp::traits::input_parameter< double >::type limit(limitSEXP);
    __result = Rcpp::wrap(cpt_lik_tk(par, problems, choices, limit));
    return __result;
END_RCPP
}
// cpt_lik_ge
double cpt_lik_ge(std::vector<double> par, GenericVector problems, std::vector<int> choices, double limit);
RcppExport SEXP shinyCpp2_cpt_lik_ge(SEXP parSEXP, SEXP problemsSEXP, SEXP choicesSEXP, SEXP limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type problems(problemsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type choices(choicesSEXP);
    Rcpp::traits::input_parameter< double >::type limit(limitSEXP);
    __result = Rcpp::wrap(cpt_lik_ge(par, problems, choices, limit));
    return __result;
END_RCPP
}
// cpt_lik_p
double cpt_lik_p(std::vector<double> par, GenericVector problems, std::vector<int> choices, double limit);
RcppExport SEXP shinyCpp2_cpt_lik_p(SEXP parSEXP, SEXP problemsSEXP, SEXP choicesSEXP, SEXP limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type problems(problemsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type choices(choicesSEXP);
    Rcpp::traits::input_parameter< double >::type limit(limitSEXP);
    __result = Rcpp::wrap(cpt_lik_p(par, problems, choices, limit));
    return __result;
END_RCPP
}
// cpt_randchoice_tk
std::vector<int> cpt_randchoice_tk(std::vector<double> par, GenericVector problems);
RcppExport SEXP shinyCpp2_cpt_randchoice_tk(SEXP parSEXP, SEXP problemsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type problems(problemsSEXP);
    __result = Rcpp::wrap(cpt_randchoice_tk(par, problems));
    return __result;
END_RCPP
}
// cpt_randchoice_ge
std::vector<int> cpt_randchoice_ge(std::vector<double> par, GenericVector problems);
RcppExport SEXP shinyCpp2_cpt_randchoice_ge(SEXP parSEXP, SEXP problemsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type problems(problemsSEXP);
    __result = Rcpp::wrap(cpt_randchoice_ge(par, problems));
    return __result;
END_RCPP
}
// cpt_randchoice_p
std::vector<int> cpt_randchoice_p(std::vector<double> par, GenericVector problems);
RcppExport SEXP shinyCpp2_cpt_randchoice_p(SEXP parSEXP, SEXP problemsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<double> >::type par(parSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type problems(problemsSEXP);
    __result = Rcpp::wrap(cpt_randchoice_p(par, problems));
    return __result;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP shinyCpp2_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(rcpp_hello_world());
    return __result;
END_RCPP
}
